broker = "34.22.67.163:29092"
topic = "test1"

48:30

192.168.0.26:29092
start: 2:31 ~

# -Dcom.sun.management.jmxremote.rmi.port=9999
-Dcom.sun.management.jmxremote=true
                    -Dcom.sun.management.jmxremote.ssl=false
                    -Dcom.sun.management.jmxremote.authenticate=false
                    -Dcom.sun.management.jmxremote.local.only=false
                    -Djava.rmi.server.hostname=${IP}
                    -Djava.net.preferIPv4Stack=true
#topics

--생성
docker-compose -f docker-compose_server.yml exec kafka-1 kafka-topics --create --bootstrap-server kafka-1:9092 --replication-factor 3 --partitions 4 --topic test1

docker-compose exec kafka-1 kafka-topics --create --topic test1 --bootstrap-server kafka-1:9092 --replication-factor 3 --partitions 3


--조회
docker-compose -f docker-compose_server.yml exec kafka-1 kafka-topics --list --bootstrap-server kafka-1:9092

--삭제
docker-compose -f docker-compose_server.yml exec kafka-1 kafka-topics --delete --bootstrap-server kafka-1:9092 --topic test1


버퍼/캐시메모리 삭제
sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'

2:43

#pro

docker-compose -f docker-compose_server.yml exec kafka-1 kafka-producer-perf-test \
--producer-props bootstrap.servers=34.146.29.164:29092 \
--print-metric \
--record-size 4096 --num-records 1000000 --throughput -1000 \
--topic test1


# 윈도우
./kafka-producer-perf-test.bat `
--producer-props bootstrap.servers=34.146.29.164:29092 `
--print-metric `
--record-size 4096 --num-records 1000 --throughput 1000 `
--topic test1

./kafka-producer-perf-test.bat `
--producer-props bootstrap.servers=192.168.0.26:9092 `
--print-metric `
--record-size 4096 --num-records 10000 --throughput 1000 `
--topic ttt

#con
##윈도우
./kafka-consumer-perf-test.bat `
--broker-list 34.146.29.164:29092 `
--topic test1 `
--messages 1000 `
--show-detailed-stats `
--reporting-interval 100
--group g1


##리눅스
docker-compose -f docker-compose.yml exec kafka-1 kafka-consumer-perf-test \
--broker-list 34.146.29.164:2139092 \
--topic test1 \
--messages 20000000 \
--show-detailed-stats \
--reporting-interval 1000
34.146.29.164:29092 34.146.29.164:39092 34.146.29.164:49092

#latency

./kafka-run-class.bat kafka.tools.EndToEndLatency `
34.146.29.164:29092,34.146.29.164:39092,34.146.29.164:49092 `
test2 10000 1 4096 `
./end_to_end.properties


wget https://github.com/danielqsj/kafka_exporter/releases/download/v2.3.1/kafka_exporter-2.3.1.linux-amd64.tar.gz


10만개 씩(1,428)

-비동기(aiokafka)
2023-08-13 22:16:55,460
2023-08-13 22:16:55,874
=0.0414

-동기 처리(confluent)

2023-08-13 22:24:26,226
2023-08-13 22:24:27,059
=0.0833

-동기처리(kafka-python)
2023-08-13 21:44:33,149
2023-08-13 21:44:34,165
= 0.1016초



30만개씩(1,395)

-비동기(aiokafka)
2023-08-13 22:44:06,581
2023-08-13 22:44:06,582
=0.001

-동기 처리(confluent)
2023-08-13 22:03:46,581
2023-08-13 22:03:48,122
=0.1541초

-동기처리(kafka-python)
2023-08-13 21:53:51,665
2023-08-13 21:53:52,059
=0.0394초


70만개씩(1,386)

-비동기(aiokafka)
2023-08-13 23:04:43,538 
2023-08-13 23:04:44,989
= 0.1451

-동기 처리(confluent)
2023-08-14 00:09:13,896
2023-08-14 00:09:17,256
= 0.3360

-동기처리(kafka-python)
2023-08-13 23:34:28,019
2023-08-13 23:34:28,812
=0.0793



10만개, 1개당 4092byte

메시지큐:86.87768530845642                   20.085266590118408

파이프:108.11168384552002                    35.818610429763794

공유메모리: 97.59458422660828                25.31653141975403


20만개, 1개당 4092byte

메시지큐:180.86609554290771

파이프:221.02308297157288


공유메모리: 193.66116905212402

11:32 ~12:00


--kafka ui

docker run -p 8080:8080 `
	-e KAFKA_CLUSTERS_0_NAME=kafka-1 `
	-e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=34.22.67.163:29092,34.22.67.163:39092,34.22.67.163:49092,34.22.67.163:59092,34.22.67.163:19092 `
	-e KAFKA_CLUSTERS_0_ZOOKEEPER=34.22.67.163:22181 `
	-e DYNAMIC_CONFIG_ENABLED=true `
	-d provectuslabs/kafka-ui:master



Error: JMX connector server communication error: service:jmx:rmi://34.146.29.164:8999
jdk.internal.agent.AgentConfigurationError: java.rmi.server.ExportException: Port already in use: 8999; nested exception is:
        java.net.BindException: Cannot assign requested address (Bind failed)
        at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.exportMBeanServer(ConnectorBootstrap.java:820)
        at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:479)
        at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:447)
        at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:599)
Caused by: java.rmi.server.ExportException: Port already in use: 8999; nested exception is:
        java.net.BindException: Cannot assign requested address (Bind failed)
        at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:335)
        at java.rmi/sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:243)
        at java.rmi/sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:412)
        at java.rmi/sun.rmi.transport.LiveRef.exportObject(LiveRef.java:147)
        at java.rmi/sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:234)
        at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap$PermanentExporter.exportObject(ConnectorBootstrap.java:203)
        at java.management.rmi/javax.management.remote.rmi.RMIJRMPServerImpl.export(RMIJRMPServerImpl.java:153)
        at java.management.rmi/javax.management.remote.rmi.RMIJRMPServerImpl.export(RMIJRMPServerImpl.java:138)
        at java.management.rmi/javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:473)
        at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.exportMBeanServer(ConnectorBootstrap.java:816)
        ... 3 more
Caused by: java.net.BindException: Cannot assign requested address (Bind failed)
        at java.base/java.net.PlainSocketImpl.socketBind(Native Method)
        at java.base/java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:452)
        at java.base/java.net.ServerSocket.bind(ServerSocket.java:400)
        at java.base/java.net.ServerSocket.<init>(ServerSocket.java:262)
        at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap$HostAwareSocketFactory.createServerSocket(ConnectorBootstrap.java:894)
        at java.rmi/sun.rmi.transport.tcp.TCPEndpoint.newServerSocket(TCPEndpoint.java:670)
        at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:324)
        ... 12 more



